#+TITLE: Emacs Configuration
#+AUTHOR: Luis Enrique Ramirez CHavez

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Luis Enrique Ramirez Chavez"
      user-mail-address "sccluisx@gmail.com")
#+end_src


* Settings
** Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  ;; Remember
  ;; C-x n n
  ;;   Narrow down to between point and mark (narrow-to-region).
  ;;   This can really freak you out, don't enable it unless you
  ;;   practice getting out of it.
  ;; C-x n w
  ;;   Widen to make the entire buffer accessible again (widen).
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p) ;; "No me rompas las pelotas" cr

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode) ; remove this from the mode-line display

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  ;; (setq visible-bell t)
  ;; because of a bug in El Capitan, setting this to nil
  (setq visible-bell nil)

#+end_src


** Programming

   #+BEGIN_SRC emacs-lisp
     (defun my-prog-mode-hook ()
       (linum-mode 1)
       (message "Truncating long lines in programming mode...")
       (toggle-truncate-lines t))
     (add-hook 'prog-mode-hook 'my-prog-mode-hook)
   #+END_SRC


** Edit With Emacs

   [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Chrome plugin]]

   Following Daniel here to use Emacs to edit posts on Discourse,
   which has a post editor that overrides normal Emacs key bindings
   with other functions. As such, ~markdown-mode~ is used.

   #+begin_src emacs-lisp
     (use-package edit-server
       :ensure t
       :config
       (progn
         (edit-server-start)
         (setq edit-server-default-major-mode 'markdown-mode)
         (setq edit-server-new-frame nil)))
   #+end_src


** Grep
   #+BEGIN_SRC emacs-lisp
     (add-hook 'grep-mode-hook
               '(lambda ()
                  (progn
                    (message "Truncating long lines in grep mode...")
                    (toggle-truncate-lines t))))
   #+END_SRC
** Hide-Show 
   for hs-minor-mode

   Glbally hyper h/t will hide/toggle, enabling hs-minor-mode if necessary.

   So you can just move to a code block and H-h to hide it or H-t to toggle. 

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "H-h") 'enable-hs-and-hide-block)
     (global-set-key (kbd "H-s") (kbd "C-c @ C-s")) ; show block
     (global-set-key (kbd "H-t") 'enable-hs-and-toggle-hiding)

     (defun enable-hs-and-hide-block ()
       "Enable hs-minor-mode if it isn't on and hide the source block"
       (interactive)
       (unless (bound-and-true-p hs-minor-mode)
           (hs-minor-mode 1)
           (message "hs-minor-mode enabled"))
       (hs-hide-block))

     (defun enable-hs-and-toggle-hiding ()
       "Enable hs-minor-mode if it isn't on and toggle-hiding"
       (interactive)
       (unless (bound-and-true-p hs-minor-mode)
           (hs-minor-mode 1)
           (message "hs-minor-mode enabled"))
       (hs-toggle-hiding))
   #+END_SRC

* Modes (Alphabetical)
** Exec path from shell
   So emacs can also find executables (like "coffee" for coffee-repl).
   See [[https://github.com/purcell/exec-path-from-shell][repo  documentation]].
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :init
       (exec-path-from-shell-initialize))
   #+end_src  

** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (progn
         (global-flycheck-mode)))
   #+end_src

** Ido

   See also useful commands [[*ido-mode][ido-mode]]

   #+begin_src emacs-lisp
     (use-package ido
       :init
       (setq ido-enable-flex-matching t)
       (setq ido-everywhere t)
       (ido-mode t)
       (use-package ido-vertical-mode
         :ensure t
         :defer t
         :init (ido-vertical-mode 1)
         (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
   #+end_src


** Smartscan

   Quickly move to previous and next symbol under the cursor (or replace)

   #+begin_src emacs-lisp
     (use-package smartscan
       :ensure t
       :config (global-smartscan-mode 1)
       :bind (("M-n" . smartscan-symbol-go-forward)
              ("M-p" . smartscan-symbol-go-backward)
              ("M-'" . smartscan-symbol-replace) ; overrides abbrev-prefix-mark
              ))
   #+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

** Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :defer t
       :ensure t)
   #+end_src

** Multiple Cursors
   For some reason I need to require 'cl. Some of the mc libraries
   require 'cl-lib, but that doesn't seem to be enough.
   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (require 'cl)
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->"         . mc/mark-next-like-this)
              ("C-<"         . mc/mark-previous-like-this)
              ("C-c C-<"     . mc/mark-all-like-this)
              ("C-!"         . mc/mark-next-symbol-like-this)
              ("s-d"         . mc/mark-all-dwim)))
   #+end_src
*** To use:

    If you have

    print "foo", foo

    You can change both foos to bar by:
    1. Select the first foo in a region (move to 1st f, C-space, M-f)
    2. C-> (to start multiple-cursors)
    3. type "bar"
    4. C-g or <return> to end
  

** Org mode
*** key bindings

    See also useful commands [[*org-mode][org-mode]]

    #+begin_src emacs-lisp
      (bind-key "C-c l" 'org-store-link)
      (bind-key "C-c c" 'org-capture)
      (bind-key "C-c a" 'org-agenda)
      (global-set-key "\C-cb" 'org-iswitchb)
    #+end_src

*** Org-bullets

    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :ensure t)
    #+END_SRC

*** Org hide markers

    #+BEGIN_SRC emacs-lisp
      (setq org-hide-emphasis-markers t)
    #+END_SRC

*** Hooks

    The clocking expressions are for [[http://orgmode.org/manual/Clocking-work-time.html][clocking work time]].

    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda ()
                                 (setq org-clock-persist 'history)
                                 (org-clock-persistence-insinuate)
                                 (org-bullets-mode 1)
                                 (auto-fill-mode 1)
                                 ; (indent-tabs-mode t)
                                 ))
    #+END_SRC

*** Todo

    #+BEGIN_SRC emacs-lisp
      (setq org-todo-keywords
            '((sequence "TODO" "IN_PROGRESS" "|" "DONE")))
    #+END_SRC

** Package
   #+BEGIN_SRC emacs-lisp
     (add-hook 'package-menu-mode-hook
               (lambda ()
                 (progn
                   (message "Truncating long lines in package menu mode...")
                   (toggle-truncate-lines t))))
   #+END_SRC
** Phi-search and Phi-replace
   works with multiple cursors
   #+BEGIN_SRC emacs-lisp
     (use-package phi-search
       :defer t
       :ensure t
       :config
       (require 'phi-replace)
       (global-set-key (kbd "M-%") 'phi-replace-query))
   #+END_SRC
** "Pretty C-l"
   Display Control-l characters in a pretty way
   #+begin_src emacs-lisp
     (use-package pp-c-l
       :ensure t
       :config
       (pretty-control-l-mode 1)
       )
   #+end_src
** Python
   See also useful commands [[*python-mode][python-mode]]
   #+begin_src emacs-lisp
     (use-package python-mode
       :defer t
       :ensure t
       :config
       (python-shell-interpreter "ipython"))
   #+end_src
** Projectile

   #+BEGIN_QUOTE
   Project navigation and management library for Emacs.
   #+END_QUOTE

  http://batsov.com/projectile/

   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :diminish projectile-mode
       :commands projectile-mode
       :config
       (progn
         (projectile-global-mode t)
         (setq projectile-enable-caching t)
         (use-package ag
           :commands ag
           :ensure t)))
   #+end_src

** Recentf

   Recentf is a minor mode that builds a list of recently opened
   files. This list is is automatically saved across sessions on
   exiting Emacs - you can then access this list through a command or
   the menu.

   https://www.emacswiki.org/emacs/RecentFiles

   #+begin_src emacs-lisp
     (use-package recentf
       :bind ("C-x C-r" . helm-recentf)
       :config
       (progn
         (recentf-mode t)
         (setq recentf-max-saved-items 200)))
   #+end_src

** Yasnippet
   See also useful commands [[*yas-mode][yas-mode]]
   #+BEGIN_SRC sh
     # to install AndreaCrotti's yasnippets
     cd ~/.emacs.d
     mkdir -p yasnippets
     git clone --recursive https://github.com/capitaomorte/yasnippet snippets
   #+END_SRC
   #+BEGIN_SRC sh
     # to update
     cd ~/.emacs.d/yasnippets
     git submodule update --init
   #+END_SRC
   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :diminish yas-minor-mode
       :config
       (progn
         (setq yas-snippet-dirs (concat user-emacs-directory "yasnippets/snippets"))
         (yas-global-mode 1)))
   #+end_src
* Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t 
    :init
    (progn
      (load-theme 'zenburn t)
      (set-face-attribute 'mode-line nil
                          :box nil)
      (set-face-attribute 'mode-line-inactive nil
                          :box nil)))
(custom-set-faces
;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
)(defun fontify-frame (frame)
(set-frame-parameter frame 'font "Source Code Pro-12"))
;; Fontify current frame
(fontify-frame nil)
;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)
#+END_SRC

* Nyan mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t)
#+END_SRC




* Understand
** Key bindings

   [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][Cheatsheet for emacs v24]]

*** Prefixes
    You can see all commands that begin with a prefix by using C-h afterward,
    e.g `C-x C-h` or `C-x 4 C-h` or `C-c C-h`

    C-x is for built-in emacs commands

    C-c is for customized (major and minor mode) commands
** Remember these!
*** Default Key bindings

    Some bindings I'm practicing remembering.

    Checkout http://orgmode.org/manual/Tables.html if you haven't seen them

    |-------------+-------------------------------------------|
    | Key Binding | Description                               |
    |-------------+-------------------------------------------|
    | C-/         | undo or expand word                       |
    |             | does expand word if at the end of a word  |
    |-------------+-------------------------------------------|
    | C-h v       | describe-variable                         |
    |             | put cursor on a variable in an elisp file |
    |             | default will be the variable              |
    |-------------+-------------------------------------------|
    | C-u C-space | cycle through previously set marks        |
    |-------------+-------------------------------------------|
    | C-x C-e     | eval last sexp                            |
    |             | Symbolic EXPression, elisp                |
    |-------------+-------------------------------------------|
    | C-x n w     | exit narrow region                        |
    |-------------+-------------------------------------------|
    | C-x n w     | exit narrow region                        |
    |-------------+-------------------------------------------|
    | C-y         | yank                                      |
    |             | M-y then cycles through kill ring         |
    |-------------+-------------------------------------------|
    | C-S-delete  | delete entire line                        |
    |-------------+-------------------------------------------|
    | C-S-down    | select until last non-empty line          |
    |             | great for code blocks                     |
    |-------------+-------------------------------------------|
    | C-M-\       | indent-region                             |
    |-------------+-------------------------------------------|
    | C-x ESC ESC | repeat-complex-command                    |
    |-------------+-------------------------------------------|
    | C-z         | zap to char                               |
    |             | remember, you can set a numeric prefix    |
    |             | `C-u 3 C-z x` to delete up to 3rd x       |
    |-------------+-------------------------------------------|
    | C-x z z z   | to repeat 3 times                         |
    |             | like . in vi                              |
    |-------------+-------------------------------------------|
    | C-x 8 <RET> | unicode, eg. snowman ☃                    |
    |             | enter unicode name,                       |
    |             | like snowman (has completions)            |
    |-------------+-------------------------------------------|
    | C-x =       | what-cursor-position                      |
    |-------------+-------------------------------------------|
    | C-x C-=     | like +, increase font of buffer           |
    |-------------+-------------------------------------------|
    | C-x C-1     | decrease font of buffer                   |
    |-------------+-------------------------------------------|


    |-----------------------+-------------------------------|
    | Pattern               | Description                   |
    |-----------------------+-------------------------------|
    | C-s then C-w then C-s | select and search             |
    |                       | select moving forward by word |
    |                       | then find the selection       |
    |-----------------------+-------------------------------|
    | C-s then C-w then M-w | select and copy               |
    |-----------------------+-------------------------------|

*** Key Bindings to my functions or customized

    Definitions for these appear later in this file

    |-------------+---------------------------------|
    | Key Binding | Description                     |
    |-------------+---------------------------------|
    | H-h         | Hide a code block               |
    | H-s         | Show a code block               |
    | H-t         | Toggle hiding a code block      |
    |-------------+---------------------------------|
    | M-s o       | occur-dwim                      |
    |-------------+---------------------------------|
    | H-o         | 'browse-url-of-buffer (builtin) |
    |-------------+---------------------------------|

*** Mode specific
**** hs-minor-mode

     |-------------------+---------------------------|
     | Command           | Description               |
     |-------------------+---------------------------|
     | M-x hs-minor-mode | hide-show                 |
     |-------------------+---------------------------|
     | M-x hs-hide-all   | hide all comments         |
     |-------------------+---------------------------|
     | M-x hs-show-all   | show all (comments again) |
     |-------------------+---------------------------|

**** html-mode

     |---------+-----------------|
     | Command | Description     |
     |---------+-----------------|
     | C-c C-t | tag             |
     |---------+-----------------|
     | C-c /   | close-tag       |
     |---------+-----------------|
     | C-c C-v | view in browser |
     |---------+-----------------|

**** flycheck-mode

     |---------+-----------------------|
     | Command | Description           |
     |---------+-----------------------|
     | C-c ! v | flycheck-verify-setup |
     |---------+-----------------------|

**** ido-mode

     |---------+--------------|
     | Command | Description  |
     |---------+--------------|
     | C-f     | in ido exits |
     |---------+--------------|

**** org-mode

     |---------+-------------------------------------------|
     | Command | Description                               |
     |---------+-------------------------------------------|
     | C-c C-c | in a new #+TODO line will reload org mode |
     |---------+-------------------------------------------|
     | C-c l   | org-store-link                            |
     |---------+-------------------------------------------|
     | C-c C-l | org-insert-link                           |
     |---------+-------------------------------------------|
     | C-c *   | org-toggle-heading                        |
     |         | first select a bunch of lines to promote  |
     |---------+-------------------------------------------|
     | C-c -   | Cycle bullets (‘-’, ‘+’, ‘*’, ‘1.’, ‘1)’) |
     |         | C-x z z ... to repeat as usual            |
     |---------+-------------------------------------------|

     [[http://orgmode.org/manual/Easy-Templates.html][Easy Templates]]

     <s         then <TAB> to get a source block     

     <q         then <TAB> to get a quote

**** python-mode

     |---------+----------------------------------------------------------|
     | Command | Description                                              |
     |---------+----------------------------------------------------------|
     | C-c C-c | python-shell-switch-to-shell to execute the current file |
     |---------+----------------------------------------------------------|
     | C-c C-z | python-shell-switch-to-shell to view the shell buffer    |
     |---------+----------------------------------------------------------|

**** yas-mode

     A variable can also have a default value which is specified like
     this: ${1:object}.

     see: http://blog.refu.co/?p=1355

     |-------------------------+--------------------------------------------|
     | Command                 | Description                                |
     |-------------------------+--------------------------------------------|
     | M-x yas-describe-tables | gives a table representation of all        |
     |                         | the snippets available in the current mode |
     |-------------------------+--------------------------------------------|

*** M-x commands

    |--------------------------------+--------------------|
    | Command                        | Description        |
    |--------------------------------+--------------------|
    | M-x customize-variable         |                    |
    |--------------------------------+--------------------|
    | M-x customize-face RET default |                    |
    |--------------------------------+--------------------|
    | M-x customize-group            | emacs              |
    |                                | grep               |
    |--------------------------------+--------------------|
    | M-x ffap                       | find-file-at-point |
    |--------------------------------+--------------------|
    | M-x list-colors-display        |                    |
    |--------------------------------+--------------------|

*** Clicking

    To select "org-mode-hook" with your mouse, click on the '-'
    otherwise click on "org" to select only that part.

* Test

  #+BEGIN_SRC emacs-lisp
    (defun init ()
      "Test to quickly load my init file."
      (interactive)
      (load (concat user-emacs-directory "init.el")))
  #+END_SRC
* Run Last

  Open file work_init.el or home_init.el depending on which computer
  I'm on. Since they don't belong in my repo they are listed in my
  .gitignore file.

  #+BEGIN_SRC emacs-lisp
    (setq locations '("home" "work"))
    (dolist (loc locations)
      (let ((init-file (concat user-emacs-directory (concat loc "_init.el"))))
        (if (file-exists-p init-file)
            (progn
              (message (concat "loading " init-file))
              (load init-file)))))
  #+END_SRC
