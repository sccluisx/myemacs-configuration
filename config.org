#+TITLE: Emacs Configuration
#+AUTHOR: Luis Enrique Ramirez CHavez

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Luis Enrique Ramirez Chavez"
      user-mail-address "sccluisx@gmail.com")
#+end_src


* Settings
** Sane defaults

Let's start with some sane defaults, shall we?

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  ;; Remember
  ;; C-x n n
  ;;   Narrow down to between point and mark (narrow-to-region).
  ;;   This can really freak you out, don't enable it unless you
  ;;   practice getting out of it.
  ;; C-x n w
  ;;   Widen to make the entire buffer accessible again (widen).
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p) ;; "No me rompas las pelotas" cr

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top
  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode) ; remove this from the mode-line display

  (setq uniquify-buffer-name-style 'forward)

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  ;; (setq visible-bell t)
  ;; because of a bug in El Capitan, setting this to nil
  (setq visible-bell nil)

#+end_src


** Programming

   #+BEGIN_SRC emacs-lisp
     (defun my-prog-mode-hook ()
       (linum-mode 1)
       (message "Truncating long lines in programming mode...")
       (toggle-truncate-lines t))
     (add-hook 'prog-mode-hook 'my-prog-mode-hook)
   #+END_SRC


** Edit With Emacs

   [[https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh?hl=en][Chrome plugin]]

   Following Daniel here to use Emacs to edit posts on Discourse,
   which has a post editor that overrides normal Emacs key bindings
   with other functions. As such, ~markdown-mode~ is used.

   #+begin_src emacs-lisp
     (use-package edit-server
       :ensure t
       :config
       (progn
         (edit-server-start)
         (setq edit-server-default-major-mode 'markdown-mode)
         (setq edit-server-new-frame nil)))
   #+end_src


** Grep
   #+BEGIN_SRC emacs-lisp
     (add-hook 'grep-mode-hook
               '(lambda ()
                  (progn
                    (message "Truncating long lines in grep mode...")
                    (toggle-truncate-lines t))))
   #+END_SRC
** Hide-Show 
   for hs-minor-mode

   Glbally hyper h/t will hide/toggle, enabling hs-minor-mode if necessary.

   So you can just move to a code block and H-h to hide it or H-t to toggle. 

   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "H-h") 'enable-hs-and-hide-block)
     (global-set-key (kbd "H-s") (kbd "C-c @ C-s")) ; show block
     (global-set-key (kbd "H-t") 'enable-hs-and-toggle-hiding)

     (defun enable-hs-and-hide-block ()
       "Enable hs-minor-mode if it isn't on and hide the source block"
       (interactive)
       (unless (bound-and-true-p hs-minor-mode)
           (hs-minor-mode 1)
           (message "hs-minor-mode enabled"))
       (hs-hide-block))

     (defun enable-hs-and-toggle-hiding ()
       "Enable hs-minor-mode if it isn't on and toggle-hiding"
       (interactive)
       (unless (bound-and-true-p hs-minor-mode)
           (hs-minor-mode 1)
           (message "hs-minor-mode enabled"))
       (hs-toggle-hiding))
   #+END_SRC

* Modes (Alphabetical)
** Exec path from shell
   So emacs can also find executables (like "coffee" for coffee-repl).
   See [[https://github.com/purcell/exec-path-from-shell][repo  documentation]].
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :init
       (exec-path-from-shell-initialize))
   #+end_src  

** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (progn
         (global-flycheck-mode)))
   #+end_src

** Ido

   See also useful commands [[*ido-mode][ido-mode]]

   #+begin_src emacs-lisp
     (use-package ido
       :init
       (setq ido-enable-flex-matching t)
       (setq ido-everywhere t)
       (ido-mode t)
       (use-package ido-vertical-mode
         :ensure t
         :defer t
         :init (ido-vertical-mode 1)
         (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
   #+end_src


** Smartscan

   Quickly move to previous and next symbol under the cursor (or replace)

   #+begin_src emacs-lisp
     (use-package smartscan
       :ensure t
       :config (global-smartscan-mode 1)
       :bind (("M-n" . smartscan-symbol-go-forward)
              ("M-p" . smartscan-symbol-go-backward)
              ("M-'" . smartscan-symbol-replace) ; overrides abbrev-prefix-mark
              ))
   #+end_src

** Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src

** Markdown
   #+begin_src emacs-lisp
     (use-package markdown-mode
       :defer t
       :ensure t)
   #+end_src

** Multiple Cursors

   For some reason I need to require 'cl. Some of the mc libraries
   require 'cl-lib, but that doesn't seem to be enough.

   #+begin_src emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :init
       (require 'cl)
       :bind (("C-S-c C-S-c" . mc/edit-lines)
              ("C->"         . mc/mark-next-like-this)
              ("C-<"         . mc/mark-previous-like-this)
              ("C-c C-<"     . mc/mark-all-like-this)
              ("C-!"         . mc/mark-next-symbol-like-this)
              ("s-d"         . mc/mark-all-dwim)))
   #+end_src


* Nyan mode
#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :ensure t)
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t 
    :init
    (progn
      (load-theme 'zenburn t)
      (set-face-attribute 'mode-line nil
                          :box nil)
      (set-face-attribute 'mode-line-inactive nil
                          :box nil)))
(custom-set-faces
;; custom-set-faces was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
)(defun fontify-frame (frame)
(set-frame-parameter frame 'font "Source Code Pro-12"))
;; Fontify current frame
(fontify-frame nil)
;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)
#+END_SRC


* Yasnippet

   See also useful commands [[*yas-mode][yas-mode]]

   #+BEGIN_SRC sh
     # to install AndreaCrotti's yasnippets
     cd ~/.emacs.d
     mkdir -p yasnippets
     git clone --recursive https://github.com/capitaomorte/yasnippet snippets
   #+END_SRC

   #+BEGIN_SRC sh
     # to update
     cd ~/.emacs.d/yasnippets
     git submodule update --init
   #+END_SRC

   #+begin_src emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :diminish yas-minor-mode
       :config
       (progn
         (setq yas-snippet-dirs (concat user-emacs-directory "yasnippets/snippets"))
         (yas-global-mode 1)))
   #+end_src
